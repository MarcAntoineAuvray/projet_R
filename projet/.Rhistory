theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()+
scale_color_gradient(low = "blue", high = "red")
ggplot(df, aes_string(x=df$longitude/100000, y=df$latitude/100000, color=df$quartile_numeros_categories))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()+
scale_color_gradient(low = "blue", high = "red")
df_raffineries = load_rafineries()
ggplot(df, aes_string(x=df_raffineries$longitude/100000, y=df$latitude/100000))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()
ggplot(df, aes_string(x=df_raffineries$longitude/100000, y=df_raffineries$latitude/100000))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()
ggplot(df, aes_string(x=longitude/100000, y=latitude/100000, color=df$decile_numeros_categories))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()+
scale_color_gradient(low = "blue", high = "red")
ggplot(df, aes_string(x=df$longitude/100000, y=df$latitude/100000, color=df$decile_numeros_categories))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()+
scale_color_gradient(low = "blue", high = "red")
df_raffineries = load_rafineries()
ggplot(df_raffineries, aes_string(x=longitude/100000, y=latitude/100000))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()
df_raffineries = load_rafineries()
ggplot(df_raffineries, aes_string(x=df_raffineries$longitude/100000, df_raffineries$y=latitude/100000))+geom_point()+
df_raffineries = load_rafineries()
ggplot(df_raffineries,
aes_string(x=df_raffineries$longitude/100000,
y=df_raffineries$latitude/100000))+geom_point()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme_void()
df_raffineries = load_rafineries()
ggplot(df, aes_string(x=df$longitude/100000, y=df$latitude/100000, color=prix)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
geom_point(data=df_raffineries, aes_string(x=df_raffineries$longitude/100000, y=df_raffineries$latitude/100000), color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_void()
df_raffineries = load_rafineries()
ggplot(df, aes_string(x=df$longitude/100000, y=df$latitude/100000, color=df$prix)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
geom_point(data=df_raffineries, aes_string(x=df_raffineries$longitude/100000, y=df_raffineries$latitude/100000), color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_void()
df_raffineries = load_rafineries()
ggplot(df, aes_string(x=df$longitude/100000, y=df$latitude/100000, color=df$prix)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
geom_point(data=df_raffineries, aes_string(x=df_raffineries$longitude, y=df_raffineries$latitude), color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_void()
# package pour lancer une appli shiny
library(shiny)
# package pour faire des graphiques
library(ggplot2)
# package pour importer des fichier xml
library(xml2)
# effacer les variables de l'environnement :
rm(list=ls())
# lancer le code
source("fonctions.R")
# recuperer les donnees presentes dans chaque fichier (principales, population, raffineries)
df = readRDS("dataframe.rds")
df_pop = readRDS("dataframe_pop.rds")
df_raffineries = load_rafineries()
# nom du Rmd où le dataframe est construit
nom_rmd = "auvray_marcantoine_projetR"
# pour recharger toutes les donnees (temps d execution long)
recharger = FALSE
if (recharger) {
rmarkdown::render(input = paste0(nom_rmd, ".Rmd"),
output_file = sprintf(paste0(nom_rmd, ".html")))
df = readRDS("dataframe.rds")
df_pop = add_pop(df, file="insee_rp_hist_1968.xlsx", file_codes="laposte_hexasmal.csv")
saveRDS(df_pop, "dataframe_pop.rds")
}
# recuperer le knit html du Rmarkdown sur la construction des données
texte_presentation = HTML(as.character(read_html(paste0(nom_rmd, ".html"))))
# relancer le code du Rmarkown sur les cartes
rmarkdown::render(input = "cartes.Rmd",
output_file = sprintf("cartes.html"))
# recuperer le contenu html du knit html du Rmarkdown sur les cartes
texte_carte = HTML(as.character(read_html("cartes.html")))
# liste des onglets
ui <- fluidPage(tabsetPanel(tabPanel("Presentation",
texte_presentation),
tabPanel("Analyse unidimensionnelle",
selectInput("variable",
"Choisir une variable :",
names(df)),
radioButtons("plot_type",
"Choississez le type de graphique",
c("Histogramme"="hist",
"Boites a moustaches"="boxplot",
"Diagramme de densite"="density",
"Camembert"="pie",
"Texte"="texte"),
"hist"),
plotOutput("graph_uni")),
tabPanel("Analyse bidimensionnelle",
selectInput("xcol", "Colonne pour l'axe x", names(df)),
selectInput("ycol", "Colonne pour l'axe y", names(df)),
radioButtons("plot_type_2",
"Choississez le type de graphique",
c("Histogramme"="hist",
"Camembert"="pie",
"Diagramme de densité"="density",
"Nuage de points"="scatter"),
"hist"),
plotOutput("graph_bi")),
tabPanel("Cartographie",
texte_carte),
tabPanel("Régression linéaire",
selectInput("nombre_tests", "Nombre d'individus à tester", c(1:10)),
radioButtons("plot_type_3",
"Choississez ce que vous voulez afficher",
c("Tableau de comparaison"="texte_2",
"Nuage de points"="scatter"),
"texte_2"),
plotOutput("graph_machine_learning"))))
# liste des sorties de l'appli shiny
server <- function(input, output, session) {
liste_tri_colonnes_noms = tri_colonnes_noms(df)
booleen = unlist(liste_tri_colonnes_noms$booleen)
numerique_continu = unlist(liste_tri_colonnes_noms$numerique_continu)
numerique_discret = unlist(liste_tri_colonnes_noms$numerique_discret)
caractere_continu = unlist(liste_tri_colonnes_noms$caractere_continu)
caractere_discret = unlist(liste_tri_colonnes_noms$caractere_discret)
output$graph_uni <- renderPlot({
exception<-function(input_variable, input_plot_type){
return(text(x = 0.5, y = 0.5,
paste0("Pas d'affichage possible pour représenter la variable :\n", input_variable,
",\nde type :\n", typeof(df[ ,input_variable]),
",\nà travers un graphique de type :\n", input_plot_type, "."),
cex = 1.6, col = "black", adj = 0.5, font = 2))}
if (input$plot_type == "hist") {
if (input$variable %in% c(numerique_continu, numerique_discret)) {
ggplot(df, aes_string(x = input$variable)) + geom_histogram(bins = 30)
} else { exception(input_variable=input$variable, input_plot_type=input$plot_type) }
} else if (input$plot_type == "boxplot") {
if (input$variable %in% c(numerique_continu, numerique_discret)) {
ggplot(df, aes_string(x = "1", y = input$variable)) + geom_boxplot()
} else { exception(input_variable=input$variable, input_plot_type=input$plot_type) }
} else if (input$plot_type == "density") {
if (input$variable %in% c(numerique_continu, numerique_discret)) {
ggplot(df, aes_string(x = input$variable)) + geom_density()
} else { exception(input_variable=input$variable, input_plot_type=input$plot_type) }
} else if (input$plot_type == "pie") {
if (input$variable %in% c(booleen, caractere_discret, numerique_discret)) {
if (input$variable %in% c(caractere_discret, numerique_discret)){
df_character = data.frame(table(df[,input$variable]))
colnames(df_character) = c("Groupes", "Nombres")
ggplot(df_character, aes(x="", y=Nombres, fill=Groupes))+geom_bar(width=1, stat="identity")+coord_polar("y", start=0)+labs(title="Camembert", x="", y="")+theme_classic()
} else if (input$variable %in% booleen){
df_logical = data.frame(Groupes = c("Nombre de TRUEs", "Nombre de FALSEs"),
Nombres = c(sum(df[,input$variable]), length(df[,input$variable])-sum(df[,input$variable])))
ggplot(df_logical, aes(x="", y=Nombres, fill=Groupes))+geom_bar(width=1, stat="identity")+coord_polar("y", start=0)+labs(title="Camembert", x="", y="")+theme_classic()
}
} else { exception(input_variable=input$variable, input_plot_type=input$plot_type) }
} else if (input$plot_type == "texte") {
if(input$variable %in%  c(caractere_continu)){
text(x=0.5,
y=0.5,
paste0("Nombre de valeurs différentes: ",
length(unique(df[,input$variable])),
"\nLongueur du dataframe: ",
nrow(df)),
cex=1.6,
col="black")
} else {
text(x=0.5,
y=0.5,
paste0("Résumé de ", input$variable," : \n",
paste(capture.output(summary(df[,input$variable])), collapse="\n")),
cex=1.6,
col="black")
}
}
})
output$graph_bi <- renderPlot({
# req(input$xcol, input$ycol)
exception_2<-function(input_xcol, input_ycol, input_plot_type){
return(text(x = 0.5, y = 0.5,
paste0("Pas d'affichage possible pour représenter la variable x :\n", input_xcol,
",\nde type :\n", typeof(df[ ,input_xcol]),
",\nen fonction de la variable y :\n", input_ycol,
",\nde type :\n", typeof(df[ ,input_ycol]),
",\nà travers un graphique de type :\n", input_plot_type, "."),
cex = 1.6, col = "black", adj = 0.5, font = 2))}
if(input$plot_type_2=="hist"){
if (input$xcol %in% numerique_continu) {
if (input$ycol %in% numerique_discret) {
ggplot(df, aes(x = input$xcol, fill = input$ycol)) + geom_bar()
} else {
exception_2(input_xcol=input$xcol, input_ycol=input$ycol, input_plot_type=input$plot_type_2)
}
} else {
exception_2(input_xcol=input$xcol, input_ycol=input$ycol, input_plot_type=input$plot_type_2)
}
}else if(input$plot_type_2=="pie"){
if (input$xcol %in% numerique_discret) {
ggplot(df, aes(x = input$xcol)) + geom_bar(aes(fill = input$ycol), width = 1, stat = "count") + coord_polar("y", start = 0)
} else {
exception_2(input_xcol=input$xcol, input_ycol=input$ycol, input_plot_type=input$plot_type_2)
}
}else if(input$plot_type_2=="density"){
if (input$xcol %in% numerique_continu) {
ggplot(df, aes(x = input$xcol, color = input$ycol)) + geom_density()
} else {
exception_2(input_xcol=input$xcol, input_ycol=input$ycol, input_plot_type=input$plot_type_2)
}
}else if(input$plot_type_2 == "scatter") {
if(input$xcol %in% c(numerique_discret, numerique_continu) && input$ycol %in% c(numerique_discret, numerique_continu)) {
ggplot(df, aes_string(x=input$xcol, y=input$ycol))+geom_point()
} else {
text(x = 0.5, y = 0.5,
paste0("Pas d'affichage possible pour représenter la variable x :\n", input$xcol,
",\nde type :\n", typeof(df[,input$xcol]),
",\nen fonction de la variable y :\n", input$ycol,
",\nde type :\n", typeof(df[,input$ycol]),
",\nà travers un graphique de type :\n Scatter."),
cex = 1.6, col = "black", adj = 0.5, font = 2)
}
}
})
output$graph_machine_learning <- renderPlot({
variables_explicatives = df[, c(numerique_continu, numerique_discret)]
tablo_<-function(df, nombre_tests, prix, nom_model) {
tablo = table_prediction(df=df, nombre_tests=nombre_tests, prix=prix, nom_model=nom_model)
return(tablo)
}
if (input$plot_type_3 == "texte_2") {
tablo = tablo_(df=variables_explicatives, nombre_tests=input$nombre_tests, prix=prix, nom_model="modele_lineaire")
text(x = 0.5, y = 0.5,
paste(capture.output(tablo),
collapse="\n"),
cex = 1.6, col = "black", adj = 0.5, font = 1)
} else if (input$plot_type_3 == "scatter") {
tablo = tablo_(df=variables_explicatives, nombre_tests=input$nombre_tests, prix=prix, nom_model="modele_lineaire")
ggplot(tablo, aes(x=observations_y , y=predictions_y))+geom_point()
}
})
}
# lancement de l appli
shinyApp(ui,
server,
options = list(launch.browser = TRUE))
readLines(fonctions.R)
readLines("fonctions.R")
knitr::opts_chunk$set(echo = TRUE)
# rm(list=ls())
library(XML)
chemin = getwd()
chemin
carburants = xmlParse(paste0(chemin, "/", "PrixCarburants_quotidien_20221215.xml"))
df = data.frame(matrix(nrow=dim(sapply(getNodeSet(carburants,
"//pdv/prix[@nom='Gazole']/.."),
xmlAttrs))[2],
ncol=0))
head(df)
str(df)
df = sapply(c("id", "latitude", "longitude", "cp", "pop"),
function(str) {df[str] <- sapply(getNodeSet(carburants,
"//pdv/prix[@nom='Gazole']/.."),
xmlGetAttr,
str)})
head(df)
str(df)
df = data.frame(cbind(df,
valeur=sapply(getNodeSet(carburants,
"/pdv_liste/pdv/prix[@nom='Gazole']"),
xmlGetAttr,
"valeur"),
ville=sapply(getNodeSet(carburants,
"//pdv[prix/@nom='Gazole']/ville"),
xmlValue),
dep_num = substr(df[,"cp"], 0, 2)))
head(df)
str(df)
Encoding(df$ville) <- "UTF-8"
df[, "latitude"] = as.numeric(df[, "latitude"])
df[, "longitude"] = as.numeric(df[, "longitude"])
colnames(df)[colnames(df) == "valeur"] = "prix"
df[, "prix"] = as.numeric(df[, "prix"])
colnames(df)[colnames(df) == "pop"] <- "type_de_voie_1"
df$type_de_voie_1 <- ifelse(df$type_de_voie_1 == "R",
"route",
ifelse(df$type_de_voie_1 == "A",
"autoroute",
df$type_de_voie_1))
table(df$type_de_voie_1)
ajouter_colonnes_quantile <- function(df, nombre_categories, nom_colonne_categories="") {
if(nom_colonne_categories==""){
nom_colonne_categories = paste0("quantile_dordre_", as.character(nombre_categories))
}
df[[nom_colonne_categories]] = cut(df$prix,
breaks=quantile(df$prix,
probs=seq(0, 1, 1/nombre_categories)),
labels=1:nombre_categories,
include.lowest=TRUE)
df[[nom_colonne_categories]] = as.numeric(df[[nom_colonne_categories]])
return(df)
}
liste_quantiles = list(nombres = c(2,4,10),
noms_colonne_categories = c("mediane_numeros_categories","quartile_numeros_categories", "decile_numeros_categories"))
str(liste_quantiles)
for (i in 1:length(liste_quantiles$nombres)) {
df = ajouter_colonnes_quantile(df=df,
nombre_categories=liste_quantiles$nombres[i],
nom_colonne_categories=liste_quantiles$noms_colonne_categories[i])
print(table(df[liste_quantiles$noms_colonne_categories[i]]))
}
str(df)
charger_adresses<-function(){
adr = sapply(getNodeSet(carburants,"//pdv[prix/@nom='Gazole']/adresse"), xmlValue)
Encoding(adr) <- "UTF-8"
adr = tolower(adr)
return(adr)
}
head(charger_adresses())
liste_remplacements = list("plusieurs_choix_avec_espace"=list("mot_remplacement"=list("zoneartisanale",
"centrecommercial",
"zoneindustrielle", "lieudit",
"rondpoint", "routenationale",
"voiecommunale","zonecommerciale",
"zoneactivite"),
"mots_a_remplacer"=list(c("zone artisanale"),
c("centre commercial","c. c.","c cial", "ctre commercial", "c.commercial"),
c("zone industrielle"), c("lieu dit", "lieu-dit"),
c("rond point", "rond-point"), c("route nationale", "rn"),
c("voie communale"),c("zone commerciale","z.c.", "zc"),
c("zone activité", "zone d'activités", "zone activite"))),
"plusieurs_choix_sans_espace"=list("mot_remplacement"=list("za","centrecommercial", "zoneindustrielle",
"allee", "lieudit",
"rondpoint", "route", "chaussee",
"residence", "charriere",
"aeroport", "parc", "voie",
"avenue",  "routenationale",
"boulevard"),
"mots_a_remplacer"=list(c("z.a", "za"), c("c.c", "c/c", "ccial"), c("zi", "z.i", "z.i."),
c("allee", "allées", "allée"), c("lieudit", "lieu-dit"),
c("rondpoint", "rond-point"), c("rte", "route"), c("chaussée", "chaussee"),
c("residence", "résidence"),  c("charrière", "charriere"),
c("aéroport", "aeroport"), c("parcs", "parc"), c("voie"),
c("av.", "av", "ave", "avenue","av.de"), c("rn"),
c("boulevard", "bld", "bvd", "bd", "bd.du", "bld."))),
"un_choix"=list("faubourg", "chemin", "lotissement", "quartier", "autoroute", "rue", "aire", "cours",
"pont", "place", "impasse", "promenade",  "hameau", "carrefour", "station", "zac","village",
"domaine", "passage", "plaine", "quai", "plan", "gare", "relais"),
"regroupements"=list("mot_remplacement"=list("route",
"routenationale_autoroute",
"avenue",
"boulevard",
"rue",
"allee_chemin_voie_impasse_carrefour_chaussee_passage_voie_communale",
"cours_faubourg_lieudit_village_hameau_promenade_domaine_charriere_plain_plan",
"quartier_place_aire_parc_pont_quai_residence_gare_lotissement_rondpoint",
"centre_commercial_za_zone_industrielle_zone_commerciale_zone_activite_zac_station_zone_artisanale_relais_aeroport"),
"mots_a_remplacer"=list(c("route"),
c("routenationale","autoroute"),
c("avenue"),
c("boulevard"),
c("rue"),
c("allee","chemin","voie","impasse", "carrefour", "chaussee", "passage", "voiecommunale"),
c("cours","faubourg","lieudit","village", "hameau","promenade", "domaine","charriere","plaine","plan"),
c("quartier","place","aire","parc","pont","quai", "residence", "gare", "lotissement", "rondpoint"),
c("centrecommercial","za","zoneindustrielle","zonecommerciale", "zoneactivite", "zac",
"station", "zoneartisanale","relais", "aeroport"))))
vecteurs_types_voie<-function(vecteur_adresses, liste_remplacements){
for(adresse_i in seq_along(vecteur_adresses)){
for (vecteur_i in seq_along(liste_remplacements$plusieurs_choix_sans_espace$mots_a_remplacer)) {
if(grepl(paste(liste_remplacements$plusieurs_choix_sans_espace$mots_a_remplacer[[vecteur_i]], collapse="|"), vecteur_adresses[adresse_i][[1]])){
vecteur_adresses[adresse_i] = liste_remplacements$plusieurs_choix_sans_espace$mot_remplacement[[vecteur_i]]
}
}
for (vecteur_i in seq_along(liste_remplacements$plusieurs_choix_avec_espace$mots_a_remplacer)) {
if(any(strsplit(vecteur_adresses[adresse_i], " ")[[1]] %in% liste_remplacements$plusieurs_choix_avec_espace$mots_a_remplacer[[vecteur_i]])){
vecteur_adresses[adresse_i] = liste_remplacements$plusieurs_choix_avec_espace$mot_remplacement[[vecteur_i]]
}
}
for (mot_i in seq_along(liste_remplacements$un_choix)) {
if(grepl(liste_remplacements$un_choix[[mot_i]], vecteur_adresses[adresse_i]))
{
vecteur_adresses[adresse_i] = liste_remplacements$un_choix[[mot_i]]
}
}
}
remplacements = union(unlist(liste_remplacements$plusieurs_choix_sans_espace$mot_remplacement),
union(unlist(liste_remplacements$plusieurs_choix_avec_espace$mot_remplacement),
unlist(liste_remplacements$un_choix)))
type_voie_2_precis = ifelse(vecteur_adresses %in% remplacements, vecteur_adresses, "autre")
type_voie_2_cat = type_voie_2_precis
for(adresse_i in seq_along(type_voie_2_cat)){
for (vecteur_i in seq_along(liste_remplacements$regroupements$mots_a_remplacer)) {
if(any(strsplit(type_voie_2_cat[adresse_i], " ")[[1]] %in% liste_remplacements$regroupements$mots_a_remplacer[[vecteur_i]])){
type_voie_2_cat[adresse_i] = liste_remplacements$regroupements$mot_remplacement[[vecteur_i]]
}
}
}
return(list("type_voie_2_precis"=type_voie_2_precis,
"type_voie_2_cat"=type_voie_2_cat))
}
types_voies = vecteurs_types_voie(vecteur_adresses=charger_adresses(), liste_remplacements=liste_remplacements)
table(types_voies$type_voie_2_precis)
table(types_voies$type_voie_2_cat)
df = cbind(df, type_voie_2_precis=types_voies$type_voie_2_precis)
df = cbind(df, type_voie_2_cat=types_voies$type_voie_2_cat)
vecteur_services = sapply(getNodeSet(carburants, "//pdv/services/service"), xmlValue)
head(vecteur_services)
Encoding(vecteur_services) <- "UTF-8"
vecteur_uniques_services = unique(vecteur_services)
vecteur_uniques_services
df = cbind(df,
setNames(matrix(nrow=nrow(df),
ncol=length(vecteur_uniques_services),
dimnames=list(NULL,
vecteur_uniques_services)),
0))
str(df)
liste_services_by_station = lapply(getNodeSet(carburants, "//pdv"),
function(pdv) {
lapply(getNodeSet(pdv, "./services/service"), xmlValue)
})
head(liste_services_by_station[1])
for (i in 1:nrow(df)) {
services_station = liste_services_by_station[[i]]
for (j in 1:length(vecteur_uniques_services)) {
if (vecteur_uniques_services[j] %in% services_station) {
df[i, vecteur_uniques_services[j]] = TRUE
}
else{
df[i, vecteur_uniques_services[j]] = FALSE
}
}
}
for (i in 1:nrow(df)) {
df[i, "nombre_services"] = length(grep(TRUE, df[i, vecteur_uniques_services]))
}
saveRDS(df, "dataframe.rds")
source("fonctions.R")
print(source("fonctions.R"))
source("fonctions.R", verbose = TRUE)
source("fonctions.R", verbose = TRUE)
load_rafineries
source("fonctions.R", verbose = TRUE)
tri_colonnes_noms
split_
modele_lineaire
table_prediction
load_pop_municip
add_pop
load_rafineries
source("fonctions.R")
tri_colonnes_noms
split_
modele_lineaire
table_prediction
load_pop_municip
add_pop
load_rafineries
source("fonctions.R")
print("tri_colonnes_noms")
tri_colonnes_noms
print("split_")
split_
print("modele_lineaire")
modele_lineaire
print("table_prediction")
table_prediction
print("load_pop_municip")
load_pop_municip
print("add_pop")
add_pop
print("load_rafineries")
load_rafineries
# pour séparer un jeu de données
print("split_ : ")
split_
# pour fitter un modele lineaire sur des données
print("modele_lineaire : ")
modele_lineaire
# pour afficher la comparaison entre données
print("table_prediction : ")
table_prediction
HTML(as.character(read_html("cartes.html")))
# relancer le code du Rmarkown sur les cartes
rmarkdown::render(input = "cartes.Rmd",
output_file = sprintf("cartes.html"))
HTML(as.character(read_html("cartes.html")))
# relancer le code du Rmarkown sur les cartes
rmarkdown::render(input = "cartes.Rmd",
output_file = sprintf("cartes.html"), quiet = TRUE)
# relancer le code du Rmarkown sur les cartes
rmarkdown::render(input = "cartes.Rmd",
output_file = sprintf("cartes.html"), quiet = TRUE)
HTML(as.character(read_html("cartes.html")))
# relancer le code du Rmarkown sur les cartes
rmarkdown::render(input = "cartes.Rmd",
output_file = sprintf("cartes.html"), quiet = TRUE)
HTML(as.character(read_html("cartes.html")))
