"0","validation_croisee<-function(train, "
"0","                             column_y, "
"0","                             n_fold_cv=5, n_fold=18, "
"0","                             k_min=1, k_max=10){"
"0","  # dans columns_X on met les numeros des colonnes "
"0","  #  hors celui de la colonne a expliquer"
"0","  columns_X = setdiff(1:ncol(train), column_y)"
"0","  "
"0","  # dans fold on met un vecteur avec en valeurs"
"0","  #  des valeurs aleatoires de 1 jusqu au nombre de colonnes de train, "
"0","  #   tous les n_fold valeurs"
"0","  fold = sample(rep(1:ncol(train), each=n_fold))"
"0","  # dans cvpred, on met une matrice de NA avec,"
"0","  #  n_fold_cv*n_fold lignes,"
"0","  #  k_max - k_min + 1 colonnes"
"0","  cvpred = matrix(NA, nrow=(n_fold_cv*n_fold), ncol=(k_max - k_min + 1))"
"0","  "
"0","  # pour chaque k entre k_min et k_max"
"0","  for (k in k_min:k_max) {"
"0","    # pour chaque v entre 1 et n_fold_cv"
"0","    for (v in 1:n_fold_cv) {"
"0","      # on met dans sample1  les donnees de columns_X situees aux index "
"0","      #  qui sont les valeurs de fold non egales a v"
"0","      sample1 = train[which(fold!=v), columns_X]"
"0","      # on met dans sample2 les donnees de columns_X situees aux index "
"0","      #  qui sont les valeurs de fold egales a v"
"0","      sample2 = train[which(fold==v), columns_X]"
"0","      # on met dans class1 les donnees de column_y situees aux index "
"0","      #  qui sont les valeurs de fold non egales a v"
"0","      class1 = train[which(fold!=v), column_y]"
"0","      cvpred[which(fold==v), k] = knn(sample1, sample2, class1, k)"
"0","    }"
"0","  }"
"0","  class = as.numeric(train[,column_y])"
"0","  taux_erreur = apply(cvpred, 2, function(x) sum(class!=x)/length(x))"
"0","  return(taux_erreur)"
"0","}"
